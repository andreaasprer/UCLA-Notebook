Chorus Lapilli Notebook

To begin, follow through with the Tic-Tac-Toe tutorial from the beginning until the section about implementing game history.
To run, use npm install, then use npm start

We will mainly focus on modifying App.js to create chorus Lapilli

CHORUS-LAPILLI LOGIC:

For our first goal, lets focus on achieving the first step of the game of only 3 items on a board at a time for each player.

At the top of our Board components, lets add some state for keeping count of X's and O's:
  const [xCount, setXCount] = useState(0);
  const [oCount, setOCount] = useState(0);

Then we modify our handleClick function to immediately return the function and never modify our squares array if there are already 3 X's or O's
  function handleClick(i) {
    ...
    // Place pieces. Limit to 3 per player
    if (xIsNext && xCount < 3 && squares[i] == null) {
        nextSquares[i] = 'X';
        setXCount(xCount + 1);
    }
    else if (!xIsNext && oCount < 3 && squares[i] == null) {
      nextSquares[i] = 'O';
      setOCount(oCount + 1);
    }
    else return; 
    setSquares(nextSquares);
    setXIsNext(!xIsNext);
  }

We have successfully limited the number of items on the board

Our next goal is to allow movement of pieces on the board. There are three steps to implement this:
1. Track the selected piece
2. Move only on player's turn
3. Move only to empty squares

To keep track of the selected piece, lets create a new state called selectedIndex:
  const [selectedIndex, setSelectedIndex] = useState(null);

Then inside our handleClick function we need to add the logic of selecting a piece to move.
This must only happen when the square we click on is occupied by the same piece as the player's turn.

   if (squares[i] === (xIsNext ? "X" : "O")) {
      setSelectedIndex(i);
      return;
    }

Then when we select a piece to move, the player must immediately choose an empty spot to place it in. 
We update the board to clear the old spot and the selected index. Other than that, it follows the same logic as placing a piece on the board. 

    if (selectedIndex !== null && (squares[selectedIndex] === (xIsNext ? "X" : "O"))) {
      if (squares[i] === null) {
        nextSquares[i] = nextSquares[selectedIndex];
        nextSquares[selectedIndex] = null;
        setSelectedIndex(null);  
        setSquares(nextSquares);
        setXIsNext(!xIsNext);      
      } 
      return;
    }

Now we have successfully allowed the user to change their pieces on the board. 
However, we need to make sure that the user can only move a piece to an adjacent square.
Lets make a new function that checks whether it is a valid move called isAdjacent.
Inside isAdjacent, it contains a mapping of valid moves from a certain index, then it returns whether or not the user's source and destination square are adjacent.

  function isAdjacent(src, dest) {
    const adjacentMoves = {
      0: [1, 3, 4],
      1: [0, 2, 3, 4, 5],
      2: [1, 4, 5],
      3: [0, 1, 4, 6, 7],
      4: [0, 1, 2, 3, 5, 6, 7, 8],
      5: [1, 2, 4, 7, 8],
      6: [3, 4, 7],
      7: [3, 4, 5, 6, 8],
      8: [4, 5, 7]
    }
 
    return adjacentMoves[src]?.includes(dest);
  }

and make sure to include a check in our if statement in handleClick
    if (squares[i] === null && isAdjacent(selectedIndex, i)) {...}

Now all that is left to do is to implement the center square rule. If it's a player's turn and they have 3 pieces and one of them is in the center square,
the player's next move must win or they must leave the center square. 

To do so, create a new function called isMovable which takes in src and dest as props. 
In this function, it will create a temporary copy of the potential move the user chooses and stores it into a variable called nextSquares.
Using nextSquares, it will check if this move results in a winner, if so it will allow the player to make this move.
If not, isMovable will check if the player has 3 pieces and if one of those is in the center square. If it does then it will enforce the center movement rule by
making sure the source piece that the user selects is from the middle square. 

Below is the isMovable function:
  function isMovable(src, dest) {
    const nextSquares = squares.slice();
    nextSquares[dest] = nextSquares[src];
    nextSquares[src] = null;
  
    // If the move results in a win, allow it
    if (calculateWinner(nextSquares)) return true;
  
    // Check if the player has 3 pieces and one is in the center
    const hasCenterPiece = squares[4] === (xIsNext ? "X" : "O");
    if ((xIsNext && xCount === 3) || (!xIsNext && oCount === 3)) {
      if (hasCenterPiece) {
        // Enforce center movement rule
        return src === 4 && isAdjacent(src, dest);
      }
    }
  
    return true; // Otherwise, the move is valid
  }

  To use this function, simply add it to the if statement in handleClikc dealing with moving pieces to a new square.
      if (squares[i] === null && isAdjacent(selectedIndex, i) && isMovable(selectedIndex, i)) {

We have now built a function chorus lapilli game. 
